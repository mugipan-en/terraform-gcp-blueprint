name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  TERRAFORM_VERSION: 1.5.7
  TERRAGRUNT_VERSION: 0.50.17
  TFLINT_VERSION: v0.47.0
  TFSEC_VERSION: v1.28.1

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}

    - name: Setup tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        version: ${{ env.TFSEC_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive .

    - name: Terraform Init (Dev)
      run: |
        cd environments/dev
        terraform init -backend=false

    - name: Terraform Validate (Dev)
      run: |
        cd environments/dev
        terraform validate

    - name: Terraform Init (Staging)
      run: |
        cd environments/staging
        terraform init -backend=false

    - name: Terraform Validate (Staging)
      run: |
        cd environments/staging
        terraform validate

    - name: Terraform Init (Production)
      run: |
        cd environments/production
        terraform init -backend=false

    - name: Terraform Validate (Production)
      run: |
        cd environments/production
        terraform validate

    - name: TFLint
      run: |
        tflint --init
        find . -name "*.tf" -not -path "./.terraform/*" -exec dirname {} \; | sort -u | xargs -I {} sh -c 'echo "Linting {}" && cd "{}" && tflint'

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: false
        format: sarif
        output: tfsec.sarif

    - name: Upload tfsec results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec.sarif

  docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup terraform-docs
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: false

    - name: Check if documentation is up to date
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Documentation is not up to date. Please run 'make docs' and commit the changes."
          git diff
          exit 1
        fi

  plan:
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: [dev, staging]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure GCP credentials
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Init
      run: |
        cd environments/${{ matrix.environment }}
        terraform init

    - name: Terraform Plan
      run: |
        cd environments/${{ matrix.environment }}
        terraform plan -no-color -out=tfplan

    - name: Comment PR with Plan
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          // Get the plan output
          const planOutput = execSync(`cd environments/${{ matrix.environment }} && terraform show -no-color tfplan`, { encoding: 'utf8' });
          
          const output = `
          ## Terraform Plan for ${{ matrix.environment }}
          
          <details>
          <summary>Show Plan</summary>
          
          \`\`\`
          ${planOutput}
          \`\`\`
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  cost-estimation:
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost JSON
      run: |
        infracost breakdown --path=environments/dev --format=json --out-file=dev-cost.json
        infracost breakdown --path=environments/staging --format=json --out-file=staging-cost.json

    - name: Post Infracost comment
      run: |
        infracost comment github --path=dev-cost.json,staging-cost.json \
          --repo=$GITHUB_REPOSITORY \
          --github-token=${{ github.token }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update